import os
import re

current_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
arg_dict = {}


class ExploitLoader:
    def __init__(self, exploit_path, exploit_type):
        self.exploit_path = exploit_path 
        self.exploit_type = exploit_type

    def open_file(self):
        with open(self.exploit_path) as f:
            lines = f.readlines()
        return lines

    def arguments_parser(self, content):
        pattern = "parser.add_option"
        args_list = []
        for line in content: 
            if re.search(pattern, line):
                args_list.append(line)
        return args_list 

    def detect_parser(self, content):
        for line in content:
            if "optparse" in line:
                return "optparse"
            # Check for argparse too 
    
    def load_exploit(self, args_list):
        arg_pattern = r"-[a-zA-Z]"
        desc_pattern = r"help=.+"
        user_args = [] 
        user_input = []
        for item in args_list:
            user_args.append((re.search(arg_pattern, item).group(0), re.search(desc_pattern, item).group(0)))
        
        # Prompt the user for the values 
        for item in user_args:
            query = item[1].split("=")[1].strip(r'"').strip(r"'")
            choice = input("\t[+] %s: " % query) 
            arg = "%s %s" % (item[0], choice)
            user_input.append(arg)
        
        # Prompt the user if they want to set up a listener for the reverse shell. 
        reverse_shell = input("\n[*] Set up listener (y/n): ")
        if reverse_shell.lower() == "y":
            port_number = input("\t[+] Enter a port number: ")
            os.system("gnome-terminal -e 'bash -c \"nc -nvlp {0}; exec bash\"'".format(port_number))
    
        # If the exploit is a python file.
        if self.exploit_type == "py":
            command = "python3 %s" % self.exploit_path
            for item in user_input:
                command = command + " " + item
            os.system(command)

        # If the exploit is a C file.
        # -- Insert code here -- 

        # If the exploit is a C++ file.
        # -- Insert code here -- 

    def run(self):
        lines = self.open_file()
        args_list = self.arguments_parser(lines)
        self.load_exploit(args_list)
        

# if __name__ == "__main__":
#     exploit_file = current_path + "/data/local_exploits/49803.py"
#     run(exploit_file)
