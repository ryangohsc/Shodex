import os
import re

current_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
arg_dict = {}


def open_File(file):
    with open(file) as f:
        lines = f.read()
        name = f.name
        exploit_sorter(lines, name)


def exploit_sorter(content, name):
    if ".py" in name:
        pattern = "def (.*)():"
        if re.search(pattern, content):
            detect_parser(content)
            # what if no parser?
    elif ".c" in name:
        print("maybe c")
    elif ".cpp" in name:
        print("maybe cpp")


def detect_parser(content):
    # for python files only
    if "argparse" in content:
        print("argparse")
    elif "optparse" in content:
        # target
        target = "parser.add_option((.*), help(.*)target(.*))"
        target_line = re.search(target, content).group().lower()
        print(target_line)
        if "uri" in target_line:
            pattern = "'(.*)'"
            uri_arg = re.search(pattern, target_line).group()
            if uri_arg is None:
                pattern = '"(.*)"'
                uri_arg = re.search(pattern, target_line).group()
            uri_arg = uri_arg.split(", ")
            uri_arg = uri_arg[0][1:-1]
            print(uri_arg)
            arg_dict.update(target=uri_arg)
        elif "ip" in target_line:
            pattern = "'(.*)'"
            ip_arg = re.search(pattern, target_line).group()
            if ip_arg is None:
                pattern = '"(.*)"'
                ip_arg = re.search(pattern, target_line).group()
            ip_arg = ip_arg.split(", ")
            ip_arg = ip_arg[0][1:-1]
            print(ip_arg)
            arg_dict.update(target=ip_arg)
        elif target_line is None:
            pass
        # credentials
        user = "parser.add_option((.*), help(.*)user(.*))".lower()
        user_line = re.search(user, content.lower()).group()
        print(user_line)
        pattern = "'(.*)'"
        user_arg = re.search(pattern, user_line).group()
        if user_arg is None:
            pattern = '"(.*)"'
            user_arg = re.search(pattern, user_line).group()
        user_arg = user_arg.split(", ")
        user_arg = user_arg[0][1:-1]
        print(user_arg)
        arg_dict.update(user_cred=user_arg)
        if user_line is None:
            pass
        # password
        pwd = "parser.add_option((.*), help(.*)pass(.*))".lower()
        pwd_line = re.search(pwd, content.lower()).group()
        print(pwd_line)
        if pwd_line is None:
            pwd = "parser.add_option((.*), help(.*)password(.*))".lower()
            pwd_line = re.search(pwd, content.lower())
        pattern = "'(.*)'"
        pwd_arg = re.search(pattern, pwd_line).group()
        if pwd_arg is None:
            pattern = '"(.*)"'
            pwd_arg = re.search(pattern, pwd_line).group()
        pwd_arg = pwd_arg.split(", ")
        pwd_arg = pwd_arg[0][1:-1]
        print(pwd_arg)
        arg_dict.update(pwd_cred=pwd_arg)
        # ip reverse shell
        iprs = "parser.add_option((.*), help(.*)ip(.*)reverse(.*))".lower()
        iprs_line = re.search(iprs, content.lower()).group()
        print(iprs_line)
        pattern = "'(.*)'"
        iprs_arg = re.search(pattern, iprs_line).group()
        if iprs_arg is None:
            pattern = '"(.*)"'
            iprs_arg = re.search(pattern, iprs_line).group()
        iprs_arg = iprs_arg.split(", ")
        iprs_arg = iprs_arg[0][1:-1]
        print(iprs_arg)
        arg_dict.update(dest_ip=iprs_arg)
        if iprs_line is None:
            pass
        # reverse shell port
        iprs_port = "parser.add_option((.*), help(.*)port(.*)reverse(.*))".lower()
        iprs_port_line = re.search(iprs_port, content.lower()).group()
        print(iprs_port_line)
        pattern = "'(.*)'"
        iprs_port_arg = re.search(pattern, iprs_port_line).group()
        if iprs_port_arg is None:
            pattern = '"(.*)"'
            iprs_port_arg = re.search(pattern, iprs_port_line).group()
        iprs_port_arg = iprs_port_arg.split(", ")
        iprs_port_arg = iprs_port_arg[0][1:-1]
        print(iprs_port_arg)
        arg_dict.update(dest_port=iprs_port_arg)
        if iprs_port_line is None:
            pass


def run(cve):
    open_File(cve)
    return arg_dict


if __name__ == "__main__":
    exploit_file = current_path + "/data/local_exploits/49803.py"
    run(exploit_file)
