# Credits: Based on pyExploitDb taken from https://github.com/GoVanguard/pyExploitDb
# Improvement, fixes and additions of features has been made by a team member of pizzaluvers

import os
import json
import csv
import requests
import time
import sys
import git

cve_to_exploit_mapping = {}
current_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
edbid_to_cve_file = current_path + "/data/edbidToCve.json"
cve_to_edbid_file = current_path + "/data/cveToEdbid.json"
edbid_to_cve_file_backup = current_path + "/data/.edbidToCve.json.bak"
cve_to_edbid_file_backup = current_path + "/data/.cveToEdbid.json.bak"
exploit_db_path = current_path + "/data/exploit-database"
request_cool_off_time = 1
debug = False
auto_update = True


def open_file(exploit_map="cveToEdbid.json", encoding="utf-8"):
    if not os.path.isdir(exploit_db_path):
        try:
            print("Downloading exploit-database")
            git.Repo.clone_from("https://github.com/offensive-security/exploit-database.git", exploit_db_path)
            update_db()
        except:
            print("[!] Could not download exploit-database")
            sys.exit(1)
    else:
        if auto_update is True:
            try:
                repo = git.Repo(exploit_db_path)
                current = repo.head.commit
                repo.remotes.origin.pull()
                if current != repo.head.commit:
                    print("[!] Updating exploit-database")
                    git.Git(exploit_db_path).pull('origin', 'master')
                    update_db()
                    backup_files()
                else:
                    print("[!] exploit-database up-to-date")
            except:
                print("[!] Could not update exploit-db, using existing installation")
        try:
            if not os.path.exists(edbid_to_cve_file):
                if os.path.exists(edbid_to_cve_file_backup) and os.path.exists(cve_to_edbid_file_backup):
                    restore_files()
                else:
                    update_db()
                    backup_files()
            with open(current_path + "/data/" + exploit_map, encoding="utf-8") as file_data:
                cve_to_exploit_map = json.load(file_data)
                global cve_to_exploit_mapping
                cve_to_exploit_mapping = cve_to_exploit_map
                if debug is True:
                    print(cve_to_exploit_mapping)
        except:
            try:
                update_db()
                backup_files()
            except:
                print("[!] Something went wrong, connect to the internet and run the program again")
                sys.exit(1)


def get_cve_details(cve_search):
    files = open(current_path + "/data/exploit-database/files_exploits.csv", encoding="utf-8")
    reader = csv.reader(files)
    next(reader)
    result = {}
    found = False
    for row in reader:
        edb, file_name, description, date, author, platform, exploit_type, port = tuple(row)
        if edb in cve_to_exploit_mapping[cve_search]:
            found = True
            result['edbid'] = edb
            result['exploit'] = exploit_db_path + "/" + file_name
            result['date'] = date
            result['author'] = author
            result['platform'] = platform
            result['type'] = exploit_type
            if debug is True:
                print("Exploit DB Id: {0}".format(edb))
                print("File: {0}".format(exploit_db_path + "/" + file_name))
                print("Date: {0}".format(date))
                print("Author: {0}".format(author))
                print("Platform: {0}".format(platform))
                print("Type: {0}".format(exploit_type))
            if port != "0":
                result['port'] = port
                if debug is True:
                    print("Port: {0}".format(port))
    if not found:
        if debug is True:
            print("[!] ERROR - No EDB Id found")
    files.close()
    return result


def search_cve(cve_search):
    if not cve_search:
        return []
    cve_search = cve_search.upper()
    if debug is True:
        print(cve_search)
    if cve_search in cve_to_exploit_mapping:
        if debug is True:
            print("Found")
        cve_data = get_cve_details(cve_search)
        if cve_data:
            return cve_data
        else:
            return cve_search
    return []


def locations_of_substring(string, substring):
    import re
    results = [m.start() for m in re.finditer(substring, string)]
    return results


def update_db():
    data = {}
    if not os.path.exists(edbid_to_cve_file):
        if os.path.exists(edbid_to_cve_file_backup) and os.path.exists(cve_to_edbid_file_backup):
            restore_files()
            with open(edbid_to_cve_file, encoding="utf-8") as file_data:
                data = json.load(file_data)
        else:
            os.system("touch {0}".format(edbid_to_cve_file))
            data = {}
    else:
        with open(edbid_to_cve_file, encoding="utf-8") as file_data:
            try:
                data = json.load(file_data)
            except:
                restore_files()
                try:
                    data = json.load(file_data)
                except:
                    print("[!] Possibly corrupt or empty: {0}".format(edbid_to_cve_file))
                    os.system("rm -f {0}".format(edbid_to_cve_file))
                    os.system("touch {0}".format(edbid_to_cve_file))
                    data = {}

    files = open(exploit_db_path + "/files_exploits.csv", encoding="utf-8")
    reader = csv.reader(files)
    next(reader)
    reader = list(reader)
    edb_count = len(reader)
    headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) '
                             'Chrome/39.0.2171.95 Safari/537.36'}
    print("[!] Refreshing EDBID-CVE mapping. This may take a long time.")
    for i in range(edb_count):
        percent_done = (i / edb_count) * 100
        print("[!] Processing {0}%".format(str(percent_done)))
        edb = tuple(reader[i])[0]
        if edb in data:
            if debug is True:
                print("[!] Skipping {0}".format(str(edb)))
            pass
        else:
            content = ""
            while True:
                try:
                    request_uri = "https://www.exploit-db.com/exploits/{0}".format(str(edb))
                    if debug is True:
                        print("[!] Requesting {0}".format(request_uri))
                    r = requests.get(request_uri, headers=headers, timeout=10)
                    content = r.content.decode("ISO-8859-1")
                except Exception as e:
                    if debug is True:
                        print("[!] Error {0}".format(e))
                    time.sleep(request_cool_off_time)
                    continue
                finally:
                    break
            indexes = locations_of_substring(content, 'https://nvd.nist.gov/vuln/detail/CVE-')
            used = []
            for pos in indexes:
                cve = r.content[pos + 33: pos + 33 + 14]
                if isinstance(cve, bytes):
                    cve = cve.decode("ISO-8859-1")
                cve = cve.replace('\"', '')
                cve = cve.replace('\r', '')
                cve = cve.replace('\n', '')
                if cve in used:
                    continue
                used.append(cve)
            data[edb] = used
            with open(edbid_to_cve_file, "w", encoding="utf-8") as file_data:
                json.dump(data, file_data, indent=2)
            global cve_to_exploit_mapping
            cve_to_exploit_mapping = {}
            for k, v in data.items():
                for e in v:
                    cve_to_exploit_mapping[e] = cve_to_exploit_mapping.get(e, [])
                    cve_to_exploit_mapping[e].append(k)
            with open(cve_to_edbid_file, "w", encoding="utf-8") as file_data:
                json.dump(cve_to_exploit_mapping, file_data, indent=2)


def search_keyword(keyword):
    result_list = []
    if not keyword:
        return []
    print(keyword)
    files = open(exploit_db_path + "/files_exploits.csv", encoding="utf-8")
    reader = csv.reader(files)
    next(reader)
    reader = list(reader)
    edb_count = len(reader)
    files.close()
    for i in range(edb_count):
        result = tuple(reader[i])[2]
        edb = tuple(reader[i])[0]
        if keyword.lower() in result.lower():
            if debug is True:
                print("Found")
            result_list.append(edb)
    cve_data = get_details_list(result_list)
    if cve_data:
        return cve_data
    else:
        return []


def get_details_list(id_list):
    result = []
    for i in id_list:
        edbid_data = get_edbid_details(i)
        result.append(edbid_data)
    return result


def get_edbid_details(edbid):
    files = open(current_path + "/data/exploit-database/files_exploits.csv", encoding="utf-8")
    reader = csv.reader(files)
    next(reader)
    result = []
    for row in reader:
        edb, file_name, description, date, author, platform, exploit_type, port = tuple(row)
        if edbid == edb:
            result.append(row)
    files.close()
    return result


def backup_files():
    os.system("cp {0} {1}".format(edbid_to_cve_file, edbid_to_cve_file_backup))
    os.system("cp {0} {1}".format(cve_to_edbid_file, cve_to_edbid_file_backup))


def restore_files():
    os.system("cp {0} {1}".format(edbid_to_cve_file_backup, edbid_to_cve_file))
    os.system("cp {0} {1}".format(cve_to_edbid_file_backup, cve_to_edbid_file))


def run(cve_list):
    open_file()
    for cve in cve_list:
        if cve.upper().startswith("CVE-"):
            results = search_cve(cve)
            if results:
                print("[!] " + cve + " Found! Getting the exploit PoC.")
                os.system("cp {0} {1}".format(results["exploit"], current_path))
                return True
            else:
                print("[!] Failed to get " + cve)
                return False
        # Not sure if this going to be used yet
        else:
            results = search_keyword(cve)
            if results:
                for i in results:
                    print(i)
                print(results)
            else:
                print("[!] Failed to get " + cve)
                return False


if __name__ == "__main__":
    debug = False
    cve_lists = ["CVE-2018-14592", "CVE-2003-0226"]
    run(cve_lists)
